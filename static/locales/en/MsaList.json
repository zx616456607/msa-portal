{
  "list": {
    "confirmHideService": "Are you sure you want to hide the service  {{appName}} ?",
    "addExpulsionsManualrulesSucc": "The service has been successfully marked as hide and will be hidden later",
    "confirmShowApp": "Are you sure unhide the service {{appName}} ？",
    "delExpulsionsManualrulesSucc": "The service has been successfully marked as appear and will be unhide later",
    "removeRegisterTitle": "Remove registration",
    "confirmRemoveRegister": "Are you sure you want to remove the service  {{appName}} ?",
    "removeRegisterSucc": "Remove registration successfully",
    "appName": "Microservice Name",
    "noFound": "Hidden",
    "upSum": "Status",
    "type": "Type",
    "discoverable": "Status",
    "discover": "Appear",
    "cover": "Hidden",
    "oprea": "Operation",
    "isMsaAutomatic": "Auto-registered microservices do not support adding instances",
    "add": "Add instance",
    "hideService": "Hide service",
    "cancelHideService": "Unhide",
    "removeRegister": "Remove",
    "serviceName": "ServiceName",
    "version": "Version",
    "side": "App",
    "group": "Group",
    "ip": "Service IP",
    "creationTime": "Registration time",
    "restService": "REST Service",
    "registerMsa": "RegisterMSA",
    "reflesh": "Refresh",
    "searchPlaceholder": "Enter a microservice name",
    "total": "Total  {{total}}  item",
    "classify": "Type :",
    "provider": "Provider",
    "customer": "Consumer",
    "searchByName": "Enter a microservice name or IP",
    "rpc": "RPC Service"
  },
  "register": {
    "portRepeat": "This serviceAddr:port already exists",
    "appNameRepeat": "This microservice already exists",
    "registerFailed": "registration failed",
    "registerSucc": "registration successfully",
    "registerSuccDesc": "Manual registration is completed and will be displayed in the microservices list in a few seconds",
    "addInstFailed": "Add instance failed",
    "addInstSucc": "Add instance successfully",
    "testHealth": "Test health status",
    "testHealthing": "Testing health status...",
    "healthy": "healthy，",
    "reTestHealth": "Click to recheck",
    "testFailed": "Connection failed，",
    "reTry": "Retry",
    "serverAddr": "ServiceAddr",
    "pleaseEnterCorrect": "Please enter the correct service address",
    "hostPlaceHolder": "Please make sure the IP or host name can be accessed in the current cluster（e.g 192.168.0.1）",
    "port": "Service Port",
    "pleaseEnterPort": "Please enter the port",
    "pleaseEnterCorrectPort": "Please enter the current port",
    "portPlaceHolder": "e.g.. 8080, ranging from 0 to 65535",
    "healthAddr": "Health Addr",
    "healthAddrTooltip": "Detecting the status of the service through the health check address (the service itself's health check endpoint)",
    "pleaseEnterCorrectAddr": "Please enter the correct Addr",
    "healthPorbePlaceholder": "The service health check addr or externally depends on addr, such as：http://192.168.1.1:8080/healthcheck.html",
    "appNameMessage": "The name can be composed of 3~50 lowercase letters, numbers, and underscores, starting with a lowercase letter, ending with a lowercase letter or a number.",
    "appNamePlaceHolder": "Please enter the microservice name",
    "appMsg": "Microservice information",
    "addMore": "Continue to add",
    "submit": "Submit"
  },

  "detail": {
    "status": "Status：",
    "online": "Online",
    "total": "Total",
    "detailList": "Instance List",
    "envDetail": "Env Info",
    "log": "Log Info",
    "monitor": "Monitor",
    "config": "Configuration",
    "blownMonitor": "Circuit Breaker Monitor ",
    "blown": "Circuit Breaker",
    "demote": "Degradation ",
    "MsaBlownMonitor": {
      "viewPic": "View Diagram",
      "breaker": "Circuit Breaker",
      "threadPool": "Thread pool"
    },
    "MsaDetailBlownStrategy": {
      "setMsaBlownStrategySucc": "Set the Circuit Breaker successfully",
      "requestVolumeThresholdErr1": "Please enter the number of window requests",
      "requestVolumeThresholdErr2": "Enter an integer ranging from 1 to 10000",
      "errorThresholdPercentageErr1": "Please enter the failure rate",
      "errorThresholdPercentageErr2": "Enter an integer ranging from 0 to 100",
      "sleepWindowInMillisecondsErr1": "Please enter the failure rate",
      "sleepWindowInMillisecondsErr2": "Enter an integer ranging from 0 to 3,600,000",
      "delMsaBlownStrategySucc": "Delete the Circuit Breaker successfully",
      "editBlownStrategy": "Edit",
      "setBlownStrategy": "Set",
      "alert": "Add a Circuit Breaker to support setting enable or unable it. If the Degradation and Circuit Breaker are enabled at the same time, the Degradation priority is executed.",
      "alertWarning": "The service is not configured with the Circuit Breaker. The Circuit Breaker operation is not supported.",
      "status": "Status",
      "requestVolumeThresholdCount": "Window Requests",
      "count": "Times",
      "errorThresholdPercentage": "Failure Rate",
      "sleepWindowInMilliseconds": "Fallbreak Time Window",
      "edit": "Edit",
      "delete": "Delete",
      "opened": "Opened",
      "closed": "Closed",
      "add": "Add",
      "defaultOpened": "Default Status",
      "open": "ON",
      "close": "Close",
      "openTip": "When enabled, the fuse policy of the service itself takes effect until the policy is closed.",
      "triggerTip": "Trigger condition, trigger when the following conditions are met",
      "requestCount": "Window Requests(Times)",
      "requestCountTip": "Number of requests received by the window.",
      "failedPercent": "Failure Rate",
      "failedPercentTip": "Request failure rate of the window.",
      "failedPercentPlaceholder": "Enter an integer ranging from 0 to 100",
      "afterBlown": "After the fuse is triggered",
      "blownTime": "Fallbreak Time Window",
      "blownTimeTip": "Duration（no request is responded within the time window.）",
      "blownTimePlaceholder": "Enter an integer ranging from 0 to 3,600,000",
      "delTitle": "Delete",
      "delContent": "Are you sure you want to delete the Circuit Breaker？"
    },
    "MsadetailConfig": {
      "noConfigs": "No corresponding configuration",
      "updateFailed": "Update configuration failed",
      "updateSucc": "Update configuration successfully",
      "configProp": "Attributes",
      "propValue": "Attribute value",
      "opera": "Operation",
      "reflesh": "Refresh",
      "updateConfig": "Update",
      "check": "View"
    },
    "MsaDetailDemote": {
      "openTitle": "Enable",
      "closeTitle": "Unable",
      "openAlert": "After enabled, the Degradation policy of the service itself takes effect until the policy is disabled. If the service does not have a degraded policy, the switch does not take effect. If the Degradation and Circuit Breaker are enabled at the same time, the Degradation priority is executed.",
      "alertWarning": "The service is not configured with the Degradation. The Degradation operation is not supported.",
      "open": "ON",
      "close": "Close",
      "confirmHint": "Are you sure"
    },
    "MsaDetailEnv": {
      "onConfig": "No configuration",
      "noData": "No data available.",
      "wrong1": "Unable to get external service data",
      "reflesh": "Refresh"
    },
    "MsaDetailList": {
      "removeRegisterTitle": "Remove operation ",
      "removeRegisterContent": "Are you sure remove the service {{name}}？",
      "removeSucc": "Remove successfully",
      "onlyHint": "Once the only instance is removed, the service will be removed",
      "instanceId": "Instance ID",
      "status": "Status",
      "addr": "ServiceAddr",
      "port": "Port",
      "type": "Type",
      "lastHeartbeatAt": "Heartbeat time",
      "opera": "Operation",
      "removeRegister": "Remove",
      "autoRegister": "Auto-registered microservices do not support adding instances",
      "add": "Add instance",
      "reflesh": "Refresh",
      "searchPlaceholder": "Enter an instance ID"
    },
    "MsaDetailLogs": {
      "noLogs": "No log",
      "errorMessage": "Unable to get external service data"
    },
    "MsaMonitor": {
      "minuteWithCount": "{{I}}Minute"
    }
  }
}